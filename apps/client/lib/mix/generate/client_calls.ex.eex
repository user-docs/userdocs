defmodule Client.<%= module_plural %> do
  import Client.APISupport
  import Client.Constants
  alias Schemas.<%= schemas_module %>.<%= module_singular %>

  @callback <%= list_function_name %>(map()) :: list(<%= module_singular %>)
  <%= if create_function_name do %>@callback <%= create_function_name %>(map(), map()) :: {:ok, <%= module_singular %>} | {:error, Ecto.Changeset}<% end %>
  <%= if update_function_name do %>@callback <%= update_function_name %>(<%= module_singular %>, map(), map()) :: {:ok, <%= module_singular %>} | {:error, Ecto.Changeset}<% end %>
  <%= if delete_function_name do %>@callback <%= delete_function_name %>(binary(), map()) :: {:ok, <%= module_singular %>} | {:error, Ecto.Changeset}<% end %>
  <%= if create_function_name do %>def <%= create_function_name %>(attrs, state),
    do: Module.concat(impl(state), "<%= module_plural %>").<%= create_function_name %>(attrs, local_or_remote_opts(state)) # TODO: subsume Module.concat into impl
  <% end %>
  <%= if update_function_name do %> def <%= update_function_name %>(<%= variable_name_singular %>, attrs, state),
    do: Module.concat(impl(state), "<%= module_plural %>").<%= update_function_name %>(<%= variable_name_singular %>, attrs, local_or_remote_opts(state))
  <% end %>
  <%= if delete_function_name do %>def  <%= delete_function_name %>(%<%= module_singular %>{} = <%= variable_name_singular %>, state), do: Module.concat(impl(state), "<%= module_plural %>").<%= delete_function_name %>(<%= variable_name_singular %>, local_or_remote_opts(state))
  <% end %>
  def load_<%= variable_name_plural %>(state, opts) do
    <%= variable_name_plural %> = Module.concat(impl(state), "<%= module_plural %>").<%= list_function_name %>(local_or_remote_opts(state, opts))
    StateHandlers.load(state, <%= variable_name_plural %>, <%= module_singular %>, state_opts())
  end
end
